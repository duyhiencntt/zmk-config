/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/*
&mt {
    tapping-term-ms = <400>;
};
 */

/ {
    behaviors {
        /*
        * Homerow Mods: Cross-hand Example
     
        hm: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "CROSS_HOMEROW_MODS";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            // hold-trigger-key-positions = <5 6 7 8 9 10>;    // <---[[right-hand keys]]
        };
        */
        /*
        * Homerow Mods: Tap-Preferred Example
        */

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        /*
        * Homerow Mods: Balanced Example
        
        hm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "BALANCE_HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        */
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp GRAVE             &kp Q         &kp W               &kp E           &kp R           &kp T          &kp Y      &kp U            &kp I         &kp O        &kp P                &kp BSPC
&kp LS(LC(LEFT_ALT))  &hm LSHIFT A  &hm LEFT_CONTROL S  &hm LEFT_ALT D  &hm LEFT_WIN F  &kp G          &kp H      &hm RWIN J       &hm RALT K    &hm RCTRL L  &hm RSHFT SEMICOLON  &kp LEFT
&kp LS(LA(LC(LGUI)))  &kp Z         &kp X               &kp C           &kp V           &kp B          &kp N      &kp M            &kp COMMA     &kp DOT      &kp FSLH             &kp RIGHT
                                                        &lt 2 TAB       &lt 1 ESC       &lt 3 ENTER    &kp SPACE  &lt 5 BACKSPACE  &lt 4 DELETE
            >;

            label = "Default";
        };

        navigation {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp LG(TAB)       &kp LA(TAB)       &kp LS(F3)        &kp F3     &none        &kp LG(LS(C))    &kp LG(Z)  &kp C_AC_HOME  &kp C_AC_SEND  &kp CAPSLOCK  &kp LS(LG(NUMBER_3))
&trans  &kp LSHFT         &kp LC(UP_ARROW)  &kp LG(LEFT_ALT)  &kp LG(F)  &kp LC(H)    &kp LEFT         &kp DOWN   &kp UP         &kp RIGHT      &kp RSHIFT    &kp LS(LG(NUMBER_4))
&trans  &kp LEFT_CONTROL  &kp LG(X)         &kp LG(C)         &kp LG(V)  &kp F13      &kp PRINTSCREEN  &trans     &kp HOME       &kp END        &trans        &kp LS(LG(NUMBER_5))
                                            &trans            &trans     &trans       &trans           &trans     &trans
            >;

            label = "Navigation";
        };

        numandfunc {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp LWIN      &kp F10  &kp F9  &kp F8  &kp F7    &kp N7        &kp N8        &kp N9        &kp N0     &kp PLUS       &trans
&trans  &kp LSHFT     &kp F11  &kp F6  &kp F5  &kp F4    &kp N4        &kp N5        &kp NUMBER_6  &kp COMMA  &kp KP_MINUS   &trans
&trans  &kp LEFT_ALT  &kp F12  &kp F3  &kp F2  &kp F1    &kp NUMBER_1  &kp NUMBER_2  &kp N3        &kp DOT    &kp KP_DIVIDE  &trans
                               &trans  &trans  &trans    &kp EQUAL     &trans        &trans
            >;

            label = "Num & Func";
        };

        symbol {
            bindings = <
&trans  &kp GRAVE             &kp CARET              &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp TILDE           &kp AMPS           &kp PIPE       &kp KP_SUBTRACT  &kp PLUS          &kp BACKSLASH  &trans
&trans  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp SINGLE_QUOTE    &kp DOUBLE_QUOTES  &kp KP_DIVIDE  &kp UNDER        &kp ASTERISK      &kp SEMICOLON  &trans
&trans  &kp PERCENT           &kp DOLLAR             &kp HASH          &kp AT_SIGN        &kp QUESTION        &kp EXCLAMATION    &kp COLON      &kp LESS_THAN    &kp GREATER_THAN  &kp QUESTION   &trans
                                                     &trans            &trans             &trans              &kp EQUAL          &trans         &trans
            >;

            label = "Symbol";
        };

        system {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2          &bt BT_SEL 3  &bt BT_SEL 4         &kp K_STOP         &kp C_PLAY_PAUSE  &kp C_PREVIOUS        &kp C_NEXT  &trans  &kp LS(LC(C_POWER))
&bt BT_NXT  &trans        &trans        &kp C_BRIGHTNESS_INC  &kp K_MUTE    &kp C_VOLUME_UP      &kp C_VOLUME_UP    &kp K_MUTE        &kp C_BRIGHTNESS_INC  &trans      &trans  &kp LC(LG(Q))
&bt BT_PRV  &trans        &trans        &kp C_BRIGHTNESS_DEC  &trans        &kp C_VOLUME_DOWN    &kp C_VOLUME_DOWN  &trans            &kp C_BRIGHTNESS_DEC  &trans      &trans  &kp LA(LG(ESCAPE))
                                        &trans                &trans        &trans               &trans             &trans            &trans
            >;

            label = "System";
        };

        navigation2 {
            label = "Navigation 2";
            bindings = <
&trans  &kp LG(TAB)       &kp LA(TAB)       &kp LS(F3)          &kp F3     &none        &kp LG(LS(C))    &kp LG(Z)  &kp LA(LEFT)  &kp LA(RIGHT)  &kp CAPSLOCK  &kp LS(LG(NUMBER_3))
&trans  &kp LSHFT         &kp LC(UP_ARROW)  &kp LC(DOWN_ARROW)  &kp LG(F)  &kp LC(H)    &kp LEFT         &kp DOWN   &kp UP        &kp RIGHT      &kp RSHIFT    &kp LS(LG(NUMBER_4))
&trans  &kp LEFT_CONTROL  &kp LG(X)         &kp LG(C)           &kp LG(V)  &kp F13      &kp PRINTSCREEN  &trans     &kp LG(LEFT)  &kp LG(RIGHT)  &trans        &kp LS(LG(NUMBER_5))
                                            &trans              &trans     &trans       &trans           &trans     &trans
            >;
        };
    };
};
