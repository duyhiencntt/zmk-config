/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

&lt {
    quick-tap-ms = <200>;
    require-prior-idle-ms = <100>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <125>;
        };

        td_ls_caps: tap_dance_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "Tap Dance Capslock";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&kp CAPS>;

            tapping-term-ms = <200>;
        };

        td_plus_multi: td_plus_multi {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_PLUS_MULTI";
            #binding-cells = <0>;
            bindings = <&kp PLUS>, <&kp ASTERISK>;

            tapping-term-ms = <200>;
        };

        td_min_div: td_min_div {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MIN_DIV";
            #binding-cells = <0>;
            bindings = <&kp KP_SUBTRACT>, <&kp KP_DIVIDE>;

            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp GRAVE             &kp Q         &kp W               &kp E           &kp R           &kp T          &kp Y      &kp U            &kp I         &kp O        &kp P                &kp BSPC
&kp LS(LC(LEFT_ALT))  &hm LSHIFT A  &hm LEFT_CONTROL S  &hm LEFT_ALT D  &hm LEFT_WIN F  &kp G          &kp H      &hm RWIN J       &hm RALT K    &hm RCTRL L  &hm RSHFT SEMICOLON  &kp LEFT
&kp LS(LA(LC(LGUI)))  &kp Z         &kp X               &kp C           &kp V           &kp B          &kp N      &kp M            &kp COMMA     &kp DOT      &kp FSLH             &kp RIGHT
                                                        &lt 2 TAB       &lt 1 ESC       &lt 3 ENTER    &kp SPACE  &lt 1 BACKSPACE  &lt 4 DELETE
            >;

            label = "Default";
        };

        navigation {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp LG(GRAVE)   &kp LA(TAB)  &kp LS(F3)        &kp F3     &none        &kp LG(LS(C))    &kp LG(Z)   &kp HOME       &kp END        &kp CAPSLOCK  &kp LS(LG(NUMBER_3))
&trans  &kp LEFT_SHIFT  &kp LG(S)    &kp LG(LEFT_ALT)  &kp LG(F)  &kp LG(H)    &kp LEFT         &kp DOWN    &kp UP         &kp RIGHT      &kp RSHIFT    &kp LS(LG(NUMBER_4))
&trans  &kp LEFT_ALT    &kp LG(X)    &kp LG(C)         &kp LG(V)  &kp F13      &kp PRINTSCREEN  &trans      &kp PAGE_UP    &kp PAGE_DOWN  &trans        &kp LS(LG(NUMBER_5))
                                     &trans            &trans     &trans       &trans           &kp K_BACK  &kp K_FORWARD
            >;

            label = "Navigation";
        };

        numandfunc {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp LWIN      &kp F10  &kp F9  &kp F8  &kp F7    &kp N7        &kp N8        &kp N9        &kp N0     &td_plus_multi  &trans
&trans  &kp LSHFT     &kp F11  &kp F6  &kp F5  &kp F4    &kp N4        &kp N5        &kp NUMBER_6  &kp COMMA  &td_min_div     &trans
&trans  &kp LEFT_ALT  &kp F12  &kp F3  &kp F2  &kp F1    &kp NUMBER_1  &kp NUMBER_2  &kp N3        &kp DOT    &kp KP_DIVIDE   &trans
                               &trans  &trans  &trans    &kp EQUAL     &trans        &trans
            >;

            label = "Num & Func";
        };

        symbol {
            bindings = <
&trans  &kp GRAVE             &kp CARET              &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp TILDE           &kp AMPS           &kp PIPE       &kp KP_SUBTRACT  &kp PLUS          &kp BACKSLASH  &trans
&trans  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp SINGLE_QUOTE    &kp DOUBLE_QUOTES  &kp KP_DIVIDE  &kp UNDER        &kp ASTERISK      &kp SEMICOLON  &trans
&trans  &kp PERCENT           &kp DOLLAR             &kp HASH          &kp AT_SIGN        &kp QUESTION        &kp EXCLAMATION    &kp COLON      &kp LESS_THAN    &kp GREATER_THAN  &kp QUESTION   &trans
                                                     &trans            &trans             &trans              &kp EQUAL          &trans         &trans
            >;

            label = "Symbol";
        };

        systemAndMouse {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &kp C_VOLUME_UP      &kp C_VOLUME_UP    &mkp LCLK  &mkp RCLK  &mkp MCLK  &trans  &kp LS(LC(C_POWER))
&bt BT_NXT  &trans        &trans        &trans        &trans        &kp K_MUTE           &kp K_MUTE         &trans     &trans     &trans     &trans  &kp LC(LG(Q))
&bt BT_PRV  &trans        &trans        &trans        &trans        &kp C_VOLUME_DOWN    &kp C_VOLUME_DOWN  &mkp MB4   &mkp MB5   &trans     &trans  &kp LA(LG(ESCAPE))
                                        &trans        &trans        &trans               &trans             &trans     &trans
            >;

            label = "Sys & Mouse";
        };
    };
};
